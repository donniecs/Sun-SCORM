# Production Docker Compose Configuration
# Sun-SCORM Platform - PHASE 4 Implementation
#
# This production configuration includes:
# - Multi-stage builds for optimized images
# - Environment variable configuration
# - Health checks for all services
# - Proper networking and dependencies
# - Volume management for persistent data

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: rustici_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-production_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: packages/api-gateway/Dockerfile.production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-production_password}@postgres:5432/rustici_prod
      JWT_SECRET: ${JWT_SECRET:-supersecure_production_jwt_key}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3006}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3006}
      UPLOAD_PATH: /app/uploads
      LOG_LEVEL: info
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/var/log
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # SCORM Runtime Service
  scorm-runtime:
    build:
      context: .
      dockerfile: packages/scorm-runtime/Dockerfile.production
    environment:
      NODE_ENV: production
      API_GATEWAY_URL: http://api-gateway:3000
      LRS_SERVICE_URL: http://lrs-service:3005
      SEQUENCING_ENGINE_URL: http://sequencing-engine:3004
    ports:
      - "3003:3003"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Sequencing Engine Service
  sequencing-engine:
    build:
      context: .
      dockerfile: packages/sequencing-engine/Dockerfile.production
    environment:
      NODE_ENV: production
      API_GATEWAY_URL: http://api-gateway:3000
    ports:
      - "3004:3004"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # LRS Service
  lrs-service:
    build:
      context: .
      dockerfile: packages/lrs-service/Dockerfile.production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-production_password}@postgres:5432/rustici_prod
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile.production
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_WEBSOCKET_URL: ws://localhost:3003
      NEXT_PUBLIC_SEQUENCING_URL: http://localhost:3004
      NEXT_PUBLIC_LRS_URL: http://localhost:3005
    ports:
      - "3006:3006"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Content Ingestion Service
  content-ingestion:
    build:
      context: .
      dockerfile: packages/content-ingestion/Dockerfile.production
    environment:
      NODE_ENV: production
      API_GATEWAY_URL: http://api-gateway:3000
      UPLOAD_PATH: /app/uploads
    volumes:
      - uploads_data:/app/uploads
    ports:
      - "3002:3002"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Analytics Pipeline Service
  analytics-pipeline:
    build:
      context: .
      dockerfile: packages/analytics-pipeline/Dockerfile.production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-production_password}@postgres:5432/rustici_prod
      LRS_SERVICE_URL: http://lrs-service:3005
    depends_on:
      postgres:
        condition: service_healthy
      lrs-service:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Webhook Emitter Service
  webhook-emitter:
    build:
      context: .
      dockerfile: packages/webhook-emitter/Dockerfile.production
    environment:
      NODE_ENV: production
      API_GATEWAY_URL: http://api-gateway:3000
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local